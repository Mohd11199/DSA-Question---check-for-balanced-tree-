Given a binary tree, find if it is height balanced or not. 
A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree. 

A height balanced tree
        1
     /     \
   10      39
  /
5

An unbalanced tree
        1
     /    
   10   
  /
5

Example 1:

Input:
      1
    /
   2
    \
     3 
Output: 0
Explanation: The max difference in height
of left subtree and right subtree is 2,
which is greater than 1. Hence unbalanced
SOLUTION-------------------------------------------------------------------------------------------------- 

class Tree
{
    
    //Function to check whether a binary tree is balanced or not.
    boolean helb=true;
    int helper(Node root){
        if(root==null){
            return 0;
        }
        int lh = helper(root.left);
        int rh = helper(root.right);
        int gap = Math.abs(lh-rh);
        if(gap>1){
          helb=false;  
        }
        return Math.max(lh,rh)+1;
    }
    boolean isBalanced(Node root)
    {
	// Your code here
	helper(root);
	if(helb==true){
	    return true;
	}
	return false;
    }
}
